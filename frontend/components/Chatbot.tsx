"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useDragControls } from "framer-motion"
import { X, Send, Bot, User, Minimize2, Maximize2, RotateCcw, GripVertical } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"

// --- S·ª¨A 1: ƒê·ªãnh nghƒ©a c√°c props m√† component n√†y s·∫Ω nh·∫≠n ---
interface ChatbotProps {
  onClose: () => void; // B·∫Øt bu·ªôc ph·∫£i c√≥ m·ªôt h√†m ƒë·ªÉ th√¥ng b√°o cho component cha khi c·∫ßn ƒë√≥ng
}

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
}

interface QuickReply {
  id: string
  text: string
  response: string
}

// --- S·ª¨A 2: Nh·∫≠n prop `onClose` ---
const Chatbot = ({ onClose }: ChatbotProps) => {
  // --- S·ª¨A 3: Lo·∫°i b·ªè state `isOpen` v√¨ component cha s·∫Ω qu·∫£n l√Ω vi·ªác n√†y ---
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc\n‚Ä¢ Th√¥ng tin v·ªÅ mentors\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const dragControls = useDragControls()
  
  // (T·∫•t c·∫£ c√°c h√†m x·ª≠ l√Ω logic b√™n trong nh∆∞ handleSendMessage, getBotResponse... gi·ªØ nguy√™n)
  const quickReplies: QuickReply[] = [
    {
      id: "courses",
      text: "üìö Kh√≥a h·ªçc n√†o ph√π h·ª£p v·ªõi t√¥i?",
      response:
        "Tuy·ªát v·ªùi! ƒê·ªÉ t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\nüéØ M·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n?\nüíº Kinh nghi·ªám hi·ªán t·∫°i?\n‚è∞ Th·ªùi gian c√≥ th·ªÉ d√†nh ƒë·ªÉ h·ªçc?\n\nHo·∫∑c b·∫°n c√≥ th·ªÉ xem danh s√°ch kh√≥a h·ªçc t·∫°i m·ª•c ƒê√†o t·∫°o",
    },
    {
      id: "mentors",
      text: "üë®‚Äçüè´ Th√¥ng tin v·ªÅ mentors",
      response:
        "MSC Center c√≥ ƒë·ªôi ng≈© mentors gi√†u kinh nghi·ªám:\n\n‚≠ê 50+ mentors chuy√™n nghi·ªáp\nüè¢ T·ª´ c√°c c√¥ng ty h√†ng ƒë·∫ßu\nüéì Kinh nghi·ªám 5-15 nƒÉm\nüí° Chuy√™n m√¥n ƒëa d·∫°ng\n\nXem chi ti·∫øt t·∫°i: /mentors\n\nB·∫°n mu·ªën t√¨m mentor theo lƒ©nh v·ª±c n√†o?",
    },
    {
      id: "support",
      text: "üîß H·ªó tr·ª£ k·ªπ thu·∫≠t",
      response:
        "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n\nüîê V·∫•n ƒë·ªÅ ƒëƒÉng nh·∫≠p\nüì± L·ªói tr√™n mobile/desktop\nüé• Kh√¥ng xem ƒë∆∞·ª£c video\nüìä Theo d√µi ti·∫øn ƒë·ªô h·ªçc\nüí≥ Thanh to√°n kh√≥a h·ªçc\n\nVui l√≤ng m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i!",
    },
  ]
   const botResponses = {
    greeting: [
      "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä",
      "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay! üåü",
      "Hello! T√¥i l√† MSC Assistant, s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n! ü§ñ",
    ],
    thanks: [
      "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä",
      "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! C√≤n g√¨ kh√°c kh√¥ng? üåü",
      "C·∫£m ∆°n b·∫°n! H√£y li√™n h·ªá b·∫•t c·ª© khi n√†o c·∫ßn h·ªó tr·ª£! üíô",
    ],
    default: [
      "T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ v·∫•n ƒë·ªÅ n√†y. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:\n\nüìû G·ªçi hotline: (+84) 329 381 489\nüìß Email: msc.edu.vn@gmail.com\nüí¨ Chat v·ªõi t∆∞ v·∫•n vi√™n\n\nHo·∫∑c ch·ªçn m·ªôt trong c√°c c√¢u h·ªèi ph·ªï bi·∫øn b√™n d∆∞·ªõi! üëá",
      "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω chuy·ªÉn y√™u c·∫ßu c·ªßa b·∫°n ƒë·∫øn ƒë·ªôi ng≈© chuy√™n m√¥n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t.\n\nTrong l√∫c ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ tham kh·∫£o:\nüìö Kh√≥a h·ªçc: /dao-tao\nüë®‚Äçüè´ Mentors: /mentors\nüìù Blog: /chia-se",
      "T√¥i ƒëang h·ªçc h·ªèi th√™m ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y t·ªët h∆°n! ü§ñ\n\nHi·ªán t·∫°i, b·∫°n c√≥ th·ªÉ:\n‚Ä¢ Li√™n h·ªá tr·ª±c ti·∫øp qua hotline\n‚Ä¢ G·ª≠i email chi ti·∫øt\n‚Ä¢ ƒê·∫∑t l·ªãch t∆∞ v·∫•n mi·ªÖn ph√≠\n\nTeam MSC s·∫Ω ph·∫£n h·ªìi trong 24h! ‚ö°",
    ],
  }
   const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }
   useEffect(() => {
    scrollToBottom()
  }, [messages])
   const simulateTyping = () => {
    setIsTyping(true)
    setTimeout(
      () => {
        setIsTyping(false)
      },
      1000 + Math.random() * 2000,
    )
  }
   const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()

    if (message.includes("xin ch√†o") || message.includes("hello") || message.includes("hi")) {
      return botResponses.greeting[Math.floor(Math.random() * botResponses.greeting.length)]
    }

    if (message.includes("c·∫£m ∆°n") || message.includes("thanks") || message.includes("thank you")) {
      return botResponses.thanks[Math.floor(Math.random() * botResponses.thanks.length)]
    }
    // ... c√°c logic getBotResponse kh√°c ...
    return botResponses.default[Math.floor(Math.random() * botResponses.default.length)]
  }
   const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage: Message = { id: Date.now().toString(), text: inputMessage, sender: "user", timestamp: new Date() }
    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    simulateTyping()

    setTimeout(() => {
        const botResponse: Message = { id: (Date.now() + 1).toString(), text: getBotResponse(inputMessage), sender: "bot", timestamp: new Date() }
        setMessages((prev) => [...prev, botResponse])
      }, 1500 + Math.random() * 1500)
  }

  const handleQuickReply = (reply: QuickReply) => {
    const userMessage: Message = { id: Date.now().toString(), text: reply.text, sender: "user", timestamp: new Date() }
    setMessages((prev) => [...prev, userMessage])
    simulateTyping()
    setTimeout(() => {
      const botResponse: Message = { id: (Date.now() + 1).toString(), text: reply.response, sender: "bot", timestamp: new Date() }
      setMessages((prev) => [...prev, botResponse])
    }, 1000)
  }

  const resetChat = () => {
    setMessages([
      {
        id: "welcome",
        text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\n...", // n·ªôi dung welcome
        sender: "bot",
        timestamp: new Date(),
      },
    ])
  }


  return (
    // --- S·ª¨A 4: Lo·∫°i b·ªè to√†n b·ªô ph·∫ßn Floating Chat Button v√† th·∫ª AnimatePresence bao ngo√†i ---
    // Component n√†y b√¢y gi·ªù ch·ªâ l√† c·ª≠a s·ªï chat.
    <motion.div
      // Lo·∫°i b·ªè c√°c animation `initial`, `animate`, `exit` v√¨ component cha s·∫Ω x·ª≠ l√Ω
      // Gi·ªØ l·∫°i c√°c thu·ªôc t√≠nh drag
      drag
      dragControls={dragControls}
      dragListener={false} // Ch·ªâ cho ph√©p k√©o t·ª´ header
      dragMomentum={false}
      className="w-96 max-w-[calc(100vw-2rem)]"
      style={{ height: isMinimized ? "60px" : "600px", transition: 'height 0.3s ease-out' }} // Chuy·ªÉn animation height qua CSS
    >
      <Card className="h-full flex flex-col shadow-2xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl overflow-hidden rounded-2xl">
        {/* Header */}
        <CardHeader 
          className="bg-gradient-to-r from-blue-600 to-teal-600 text-white p-4 flex-shrink-0 cursor-grab active:cursor-grabbing"
          onPointerDown={(e) => dragControls.start(e)} // Cho ph√©p k√©o t·ª´ header
        >
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg flex items-center space-x-3">
              <Bot className="h-6 w-6" />
              <div>
                <div className="font-semibold">MSC Assistant</div>
                <div className="text-xs text-blue-100">Tr·ª±c tuy·∫øn</div>
              </div>
            </CardTitle>
            <div className="flex items-center space-x-1">
              <Button variant="ghost" size="icon" onClick={resetChat} className="text-white hover:bg-white/20 h-8 w-8">
                <RotateCcw className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => setIsMinimized(!isMinimized)} className="text-white hover:bg-white/20 h-8 w-8">
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              {/* --- S·ª¨A 5: Khi nh·∫•n n√∫t X, g·ªçi h√†m `onClose` ƒë√£ ƒë∆∞·ª£c truy·ªÅn t·ª´ cha --- */}
              <Button variant="ghost" size="icon" onClick={onClose} className="text-white hover:bg-white/20 h-8 w-8">
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {/* Chat Content */}
        <AnimatePresence>
          {!isMinimized && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="flex-1 flex flex-col min-h-0"
            >
              <CardContent className="flex-1 flex flex-col p-0 min-h-0">
                {/* Messages */}
                <ScrollArea className="flex-1 p-4">
                  {/* ... (Ph·∫ßn hi·ªÉn th·ªã tin nh·∫Øn gi·ªØ nguy√™n) ... */}
                </ScrollArea>
                {/* Quick Replies & Input */}
                <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                   {/* ... (Ph·∫ßn c√¢u h·ªèi & input gi·ªØ nguy√™n) ... */}
                </div>
              </CardContent>
            </motion.div>
          )}
        </AnimatePresence>
      </Card>
    </motion.div>
  )
}

export default Chatbot