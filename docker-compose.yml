version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: msc-postgres
    environment:
      POSTGRES_DB: msc_db
      POSTGRES_USER: msc_user
      POSTGRES_PASSWORD: msc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - msc-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: msc-backend
    environment:
      DATABASE_URL: postgresql://msc_user:msc_password@postgres:5432/msc_db?sslmode=disable
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      ENVIRONMENT: production
      PORT: 8080
      ADMIN_URL: http://admin:3001
      FRONTEND_URL: http://frontend:3000
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - msc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel
  admin:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: msc-admin
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/v1
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - msc-network
    restart: unless-stopped

  # Frontend Website
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: msc-frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/v1
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - msc-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: msc-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - admin
      - backend
    networks:
      - msc-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  msc-network:
    driver: bridge
